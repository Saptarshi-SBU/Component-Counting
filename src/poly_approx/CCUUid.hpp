/*
 * MIT License
 *
 * Copyright (c) 2019 Saptarshi Sen
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 *  UUID Class: Implements a PRNG based uuid
 *
 */

#ifndef _CCUUID_HPP_
#define _CCUUID_HPP_

#include <string.h> // memcpy

#include <array>
#include <limits>
#include <chrono>
#include <random>
#include <sstream>
#include <algorithm>

static const int CCUUidLength = 16;

//uuid namespace
enum class UUidVariant {
    ncs, // 0xxx

    rfc, // 10xx

    microsoft, // 110x

    reserved, // 111x
};

static void FormVariantByte(UUidVariant var, std::array<uint8_t, CCUUidLength>& arr) {

    switch (var) {
        case UUidVariant::ncs:
            arr[6] = arr[6] & 0x7F;
            break;

        case UUidVariant::rfc:
            arr[6] = (arr[6] & 0x3F) | 0x80;
            break;

        case UUidVariant::microsoft:
            arr[6] = (arr[6] & 0x1F) | 0xc0;
            break;

        case UUidVariant::reserved:
            arr[6] = (arr[6] | 0x70);
            break;

        default:
            break;
    }
}

enum class UUidVersion {
    none,

    time_based, // generated from a time and a node id (usually the MAC address)

    dce_based, // generated from an identifier (usually a group or user id), time, and a node id

    md5_name_based, // produce deterministic UUIDs generated by hashing a namespace identifier and name

    random_based, // generated using a random or pseudo-random number

    sha1_name_based,  // produce deterministic UUIDs generated by hashing a namespace identifier and name
};

static void FormVersionByte(UUidVersion ver, std::array<uint8_t, CCUUidLength>& arr) {
    uint8_t val = static_cast<uint8_t>(ver);

    arr[8] &= 0x0F;
    arr[8] |= (val << 4); 
}

template<class T>
struct Prng {
    T rmax_;
    std::mt19937 rand_;
    std::uniform_int_distribution<T> dist_;

    Prng() :
         rmax_(std::numeric_limits<T>::max()),
         rand_(std::chrono::high_resolution_clock::now().time_since_epoch().count()),
         dist_(std::uniform_int_distribution<T>(0, rmax_))
         {}

    T next_random(void) {
            return dist_(rand_);
    }
};

static void MakeUUidRFC(std::array<uint8_t, CCUUidLength>& arr) {
    unsigned long w;
    Prng<unsigned long> prng;

    w = prng.next_random();
    memcpy(arr.data(), &w, sizeof(unsigned long));

    w = prng.next_random();
    memcpy(arr.data() + 8, &w, sizeof(unsigned long));

    FormVariantByte(UUidVariant::rfc, arr);
    FormVersionByte(UUidVersion::random_based, arr);
}

class CCUUid {

    public:

    CCUUid() : variant_(UUidVariant::rfc), version_(UUidVersion::random_based) {
        MakeUUidRFC(data_);
    }

    UUidVariant getVariant(void) {
        return variant_;
    }

    UUidVersion getVersion(void) {
        return version_;
    }

    std::string getString(void) {
        std::string uuid;
        std::stringstream ss;
        for (int i = 0; i < CCUUidLength; i++) {
             ss << std::hex << ((data_[i] >> 0) & 0x0F);
             ss << std::hex << ((data_[i] >> 4) & 0x0F);
             if ((i == 5) || (i == 7) || (i == 9) || (i == 11))
                 ss << "-";
        }
        uuid = ss.str();
        std::reverse(uuid.begin(), uuid.end());
        return uuid;
    }

    private:

    std::array<uint8_t, CCUUidLength> data_{ {0} }; 

    UUidVariant variant_; // namespace

    UUidVersion version_; // algorithm
};

#endif
